/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id "io.qameta.allure" version "2.8.1"
    id 'java'
    id 'maven-publish'
    id "de.undercouch.download" version "4.1.1"
}
apply plugin: 'io.qameta.allure'
apply plugin: 'java'
apply plugin: 'de.undercouch.download'
import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.taskdefs.condition.Os

ext {
    chromeDriverVersion = '91.0.4472.101'
}
allure {
    autoconfigure = true
    version = '2.7.0'
    configuration = "testImplementation"
    useJUnit5 {
        version = '2.7.0'
    }
    downloadLink = 'https://github.com/allure-framework/allure2/releases/download/2.7.0/allure-2.7.0.zip'
}



compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

repositories {
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    jcenter();
}
dependencies {
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.0.0-beta-3'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.0-M1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.0-M1"
    implementation "org.junit.platform:junit-platform-engine:1.8.0-M1"
    implementation "org.junit.platform:junit-platform-launcher:1.8.0-M1"
    implementation "org.junit.platform:junit-platform-runner:1.8.0-M1"
    implementation "io.qameta.allure:allure-junit5:2.14.0"
    implementation "org.assertj:assertj-core:3.18.1"
    implementation "org.slf4j:slf4j-api:1.7.5"
    implementation "org.slf4j:slf4j-log4j12:1.7.5"
    implementation "org.eclipse.collections:eclipse-collections:11.0.0.M2"
    implementation "org.junit.jupiter:junit-jupiter-params:5.7.0"
    implementation "org.mortbay.jetty:jetty-util:6.1.25"
    implementation group: 'io.netty', name: 'netty-all', version: '4.1.65.Final'
    implementation "org.json:json:20210307"
    implementation "org.aspectj:aspectjweaver:1.9.6"
}

task downloadSeleniumHub(type: Download) {
    src 'https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar'
    dest './selenium-server-standalone-3.141.59.jar'
}

task startWebDriverGridHub(type: Exec) {
    commandLine './startWebDriverGridHub.sh', '&'
}

task startWebDriverGridNode(type: Exec) {
    commandLine './startWebDriverGridNode.sh', '&'
}

startWebDriverGridNode.dependsOn startWebDriverGridHub

task shutDownNodeAndHub(type: Exec) {
    doLast {
        commandLine './shutDownNodeAndHub.sh'
    }
}

task setupChromeDriver(type: Download) {
    def driverOsFilenamePart
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        driverOsFilenamePart = "win32"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        driverOsFilenamePart = "mac64"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
    }
    src "http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"
    dest "$buildDir/webdriver/chromedriver.zip"
    def downloadFile = file("$buildDir/webdriver/chromedriver.zip")
    def outputDir = file("$projectDir/src/test/resources/")
    inputs.property("chromeDriverVersion", chromeDriverVersion)
    outputs.dir(outputDir)
    doFirst {
        copy{
            from(zipTree(downloadFile))
            into(outputDir)
        }
    }

}

group = 'org.gencho'
version = '1.0-SNAPSHOT'
description = 'gencho-automation'
java.sourceCompatibility = JavaVersion.VERSION_11

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}
